/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
VolumeControldBAudioProcessorEditor::VolumeControldBAudioProcessorEditor (VolumeControldBAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // add some sliders..
    addAndMakeVisible (gainSlider);
    gainSlider.setSliderStyle (Slider::Rotary);
    gainSlider.addListener (this);
    gainSlider.setRange (-80.0, 0.0, 0.1);
    // add some labels for the sliders..
    gainLabel.attachToComponent (&gainSlider, false);
    gainLabel.setFont (Font (11.0f));
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
}

VolumeControldBAudioProcessorEditor::~VolumeControldBAudioProcessorEditor()
{
}

//==============================================================================
void VolumeControldBAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Hello World!", getLocalBounds(), Justification::centred, 1);
}

void VolumeControldBAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    //gainLabel.setBounds(10, 10, 100, 40);
    gainSlider.setBounds(10, 10, 150, 40);
}

void VolumeControldBAudioProcessorEditor::timerCallback()
{
    // TODO
}

void VolumeControldBAudioProcessorEditor::sliderValueChanged(Slider *pSlider)
{
    if( pSlider == &gainSlider)
    {
        
    }
}
